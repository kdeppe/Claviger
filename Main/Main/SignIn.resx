<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFyM+ABcjPgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAGyhHARsoRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFyM+ABcjPgAAAAAAAAAAABMdMwAVIDkKGSdFCiI0
        XAgkNmAEHSxOBhonRAYaJkQLGiZEBhomRAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXIz4AFyM+AQAAAAAAAAAAFB42ABUh
        Or4aJ0X/IjRc9iQ2X+QdLE7oGidF+BonRf8aJ0XFGidFAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFiI8ABYi
        PQAXIz1DFyM+/xonRf8gMFX/ITFX/xwqS/8bKEf/HCpK/x0rTP8dK0wEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAXIj0FFyM92RgkQP8aJkT/GidG/xonRv8aJ0b/GidG/x0qS/8hMVf/IzRc/yM0XQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABciPQMXIz3fGCQ//xomRP8eLE7/JTRZ/yMzV/UdKkn9HCpM/yM0XP8lOGT/JjllAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAA////////////wD///8A///8AP///AD////A////4P///wD///8A////w
        P///+D////w////8P////D////w////8P////D////wf///4D///4AP//8AD//+AAf//gID//4Pg//8D
        4P//gAD//4AA///AA///8Af///////////8=
</value>
  </data>
</root>